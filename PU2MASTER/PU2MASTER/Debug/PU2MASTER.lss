
PU2MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000174  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000174  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b8  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000624  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c1  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001318  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000352  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d3  00000000  00000000  0000168e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001861  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
//------------------------------------------—
unsigned char i;
int INFO = 7;
int main(void)
{
	DDRB = 0x00;
  92:	17 ba       	out	0x17, r1	; 23
	DDRD = 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	81 bb       	out	0x11, r24	; 17

	PORTB = 0xFF;
  98:	88 bb       	out	0x18, r24	; 24
	PORTD = 0xFF;
  9a:	82 bb       	out	0x12, r24	; 18
		if (!(PINB&0b00000100))
		{
			_delay_ms(200);
			for (int i=0;i<1;i++)
			{
				int current_byte = INFO % 10;
  9c:	ca e0       	ldi	r28, 0x0A	; 10
  9e:	d0 e0       	ldi	r29, 0x00	; 0
				{
					if ((current_byte & (1<< i)) == 0){
						PORTD = ~0b00000001;
						_delay_us(DELAY);
						} else{
						PORTD = ~0b00000000;
  a0:	ef ef       	ldi	r30, 0xFF	; 255
				PORTD = 0b00000000;
				_delay_us(DELAY);
				for (int k = 7; k>-1;k-- )
				{
					if ((current_byte & (1<< i)) == 0){
						PORTD = ~0b00000001;
  a2:	4e ef       	ldi	r20, 0xFE	; 254
						} else{
						PORTD = ~0b00000000;
						_delay_us(DELAY);
					}
				}
				PORTD = 0b00000001;
  a4:	f1 e0       	ldi	r31, 0x01	; 1

	PORTB = 0xFF;
	PORTD = 0xFF;

	while(1){
		if (!(PINB&0b00000100))
  a6:	b2 99       	sbic	0x16, 2	; 22
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <main+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	81 ee       	ldi	r24, 0xE1	; 225
  ae:	94 e0       	ldi	r25, 0x04	; 4
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x1e>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x28>
  ba:	00 00       	nop
		{
			_delay_ms(200);
			for (int i=0;i<1;i++)
			{
				int current_byte = INFO % 10;
  bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <INFO>
  c0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <INFO+0x1>
  c4:	be 01       	movw	r22, r28
  c6:	0e 94 90 00 	call	0x120	; 0x120 <__divmodhi4>
				INFO = INFO / 10;
  ca:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <INFO+0x1>
  ce:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <INFO>

				PORTD = 0b00000000;
  d2:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	a7 ec       	ldi	r26, 0xC7	; 199
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	11 97       	sbiw	r26, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x46>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x4c>
  de:	00 00       	nop
  e0:	28 e0       	ldi	r18, 0x08	; 8
  e2:	30 e0       	ldi	r19, 0x00	; 0
				_delay_us(DELAY);
				for (int k = 7; k>-1;k-- )
				{
					if ((current_byte & (1<< i)) == 0){
  e4:	81 70       	andi	r24, 0x01	; 1
  e6:	99 27       	eor	r25, r25
  e8:	00 97       	sbiw	r24, 0x00	; 0
  ea:	41 f4       	brne	.+16     	; 0xfc <main+0x6a>
						PORTD = ~0b00000001;
  ec:	42 bb       	out	0x12, r20	; 18
  ee:	a7 ec       	ldi	r26, 0xC7	; 199
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	11 97       	sbiw	r26, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x60>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x66>
  f8:	00 00       	nop
  fa:	07 c0       	rjmp	.+14     	; 0x10a <main+0x78>
						_delay_us(DELAY);
						} else{
						PORTD = ~0b00000000;
  fc:	e2 bb       	out	0x12, r30	; 18
  fe:	a7 ec       	ldi	r26, 0xC7	; 199
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	11 97       	sbiw	r26, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x70>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x76>
 108:	00 00       	nop
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	31 09       	sbc	r19, r1
				int current_byte = INFO % 10;
				INFO = INFO / 10;

				PORTD = 0b00000000;
				_delay_us(DELAY);
				for (int k = 7; k>-1;k-- )
 10e:	61 f7       	brne	.-40     	; 0xe8 <main+0x56>
						} else{
						PORTD = ~0b00000000;
						_delay_us(DELAY);
					}
				}
				PORTD = 0b00000001;
 110:	f2 bb       	out	0x12, r31	; 18
 112:	87 ec       	ldi	r24, 0xC7	; 199
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x84>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x8a>
 11c:	00 00       	nop
 11e:	c3 cf       	rjmp	.-122    	; 0xa6 <main+0x14>

00000120 <__divmodhi4>:
 120:	97 fb       	bst	r25, 7
 122:	07 2e       	mov	r0, r23
 124:	16 f4       	brtc	.+4      	; 0x12a <__divmodhi4+0xa>
 126:	00 94       	com	r0
 128:	07 d0       	rcall	.+14     	; 0x138 <__divmodhi4_neg1>
 12a:	77 fd       	sbrc	r23, 7
 12c:	09 d0       	rcall	.+18     	; 0x140 <__divmodhi4_neg2>
 12e:	0e 94 a4 00 	call	0x148	; 0x148 <__udivmodhi4>
 132:	07 fc       	sbrc	r0, 7
 134:	05 d0       	rcall	.+10     	; 0x140 <__divmodhi4_neg2>
 136:	3e f4       	brtc	.+14     	; 0x146 <__divmodhi4_exit>

00000138 <__divmodhi4_neg1>:
 138:	90 95       	com	r25
 13a:	81 95       	neg	r24
 13c:	9f 4f       	sbci	r25, 0xFF	; 255
 13e:	08 95       	ret

00000140 <__divmodhi4_neg2>:
 140:	70 95       	com	r23
 142:	61 95       	neg	r22
 144:	7f 4f       	sbci	r23, 0xFF	; 255

00000146 <__divmodhi4_exit>:
 146:	08 95       	ret

00000148 <__udivmodhi4>:
 148:	aa 1b       	sub	r26, r26
 14a:	bb 1b       	sub	r27, r27
 14c:	51 e1       	ldi	r21, 0x11	; 17
 14e:	07 c0       	rjmp	.+14     	; 0x15e <__udivmodhi4_ep>

00000150 <__udivmodhi4_loop>:
 150:	aa 1f       	adc	r26, r26
 152:	bb 1f       	adc	r27, r27
 154:	a6 17       	cp	r26, r22
 156:	b7 07       	cpc	r27, r23
 158:	10 f0       	brcs	.+4      	; 0x15e <__udivmodhi4_ep>
 15a:	a6 1b       	sub	r26, r22
 15c:	b7 0b       	sbc	r27, r23

0000015e <__udivmodhi4_ep>:
 15e:	88 1f       	adc	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	5a 95       	dec	r21
 164:	a9 f7       	brne	.-22     	; 0x150 <__udivmodhi4_loop>
 166:	80 95       	com	r24
 168:	90 95       	com	r25
 16a:	bc 01       	movw	r22, r24
 16c:	cd 01       	movw	r24, r26
 16e:	08 95       	ret

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
